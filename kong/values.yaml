issuer:
  create: true
  name: letsencrypt-prd
  # Following values is used only when create is set to true
  email: "info@neor.pro"
  privateKeySecretRefName: "letsencrypt-prd"
  server: "https://acme-v02.api.letsencrypt.org/directory"

kong:
  admin:
    enabled: true
    annotations:
      konghq.com/protocol: https
    ingress:
      annotations:
        konghq.com/https-redirect-status-code: '301'
        konghq.com/protocols: https
        konghq.com/strip-path: 'true'
        cert-manager.io/cluster-issuer: letsencrypt-prd
      enabled: true
      hostname: admin.kong.ba1.exchange.neor.space
      path: /api
      tls: admin-kong-tls
    type: ClusterIP
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/instance
              operator: In
              values:
              - dataplane
          topologyKey: kubernetes.io/hostname
        weight: 100
  certificates:
    enabled: false
  cluster:
    enabled: true
    labels:
      konghq.com/service: cluster
    tls:
      enabled: true
  clustertelemetry:
    enabled: false
  deployment:
    kong:
      enabled: true
  enterprise:
    enabled: true
    license_secret: kong-enterprise-license
    portal:
      enabled: true
    rbac:
      admin_api_auth: basic-auth
      admin_gui_auth_conf_secret: kong-config-secret
      enabled: true
      session_conf_secret: kong-config-secret
    smtp:
      enabled: false
    vitals:
      enabled: true
  env:
    admin_access_log: /dev/stdout
    admin_api_uri: https://admin.kong.ba1.exchange.neor.space/api
    admin_error_log: /dev/stdout
    admin_gui_access_log: /dev/stdout
    admin_gui_error_log: /dev/stdout
    admin_gui_host: admin.kong.ba1.exchange.neor.space
    admin_gui_protocol: https
    admin_gui_url: https://admin.kong.ba1.exchange.neor.space/
    cluster_data_plane_purge_delay: 60
    cluster_listen: 0.0.0.0:8005
    cluster_telemetry_listen: 0.0.0.0:8006
    database: postgres
    log_level: debug
    lua_package_path: /opt/?.lua;;
    nginx_worker_processes: "2"
    password:
      valueFrom:
        secretKeyRef:
          key: kong_admin_password
          name: kong-config-secret
    pg_database: kong
    pg_host:
      valueFrom:
        secretKeyRef:
          key: pg_host
          name: kong-config-secret
    pg_ssl: "off"
    pg_ssl_verify: "off"
    pg_user: kong
    pg_password: samplePass
    plugins: bundled,openid-connect
    portal: true
    portal_api_access_log: /dev/stdout
    portal_api_error_log: /dev/stdout
    portal_api_url: https://developer.kong.ba1.exchange.neor.space/api
    portal_auth: basic-auth
    portal_cors_origins: '*'
    portal_gui_access_log: /dev/stdout
    portal_gui_error_log: /dev/stdout
    portal_gui_host: developer.kong.ba1.exchange.neor.space
    portal_gui_protocol: https
    portal_gui_url: https://developer.kong.ba1.exchange.neor.space/
    portal_session_conf:
      valueFrom:
        secretKeyRef:
          key: portal_session_conf
          name: kong-config-secret
    prefix: /kong_prefix/
    proxy_access_log: /dev/stdout
    proxy_error_log: /dev/stdout
    proxy_stream_access_log: /dev/stdout
    proxy_stream_error_log: /dev/stdout
    smtp_mock: "on"
    status_listen: 0.0.0.0:8100
    trusted_ips: 0.0.0.0/0,::/0
    vitals: true
  image:
    repository: docker.io/kong/kong-gateway
  ingressController:
    env:
      kong_admin_filter_tag: ingress_controller_default
      kong_admin_token:
        valueFrom:
          secretKeyRef:
            key: password
            name: kong-config-secret
      kong_admin_url: 'https://localhost:8444'
      kong_workspace: default
      publish_service: kong/kong-kong-proxy
    image:
      repository: docker.io/kong/kubernetes-ingress-controller
    ingressClassAnnotations:
      ingressclass.kubernetes.io/is-default-class: "true"
    installCRDs: false
  manager:
    annotations:
      konghq.com/protocol: https
    http:
      enabled: false
    ingress:
      annotations:
        konghq.com/https-redirect-status-code: '301'
        nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        cert-manager.io/cluster-issuer: letsencrypt-prd
      enabled: true
      hostname: admin.kong.ba1.exchange.neor.space
      path: /
      tls: admin-kong-tls
    type: ClusterIP
  migrations:
    preUpgrade: false
  namespace: kong
  portal:
    annotations:
      konghq.com/protocol: https
    http:
      enabled: true
    ingress:
      annotations:
        konghq.com/https-redirect-status-code: '301'
        konghq.com/protocols: https
        konghq.com/strip-path: 'false'
        cert-manager.io/cluster-issuer: letsencrypt-prd
      enabled: true
      hostname: developer.kong.ba1.exchange.neor.space
      path: /
      tls: kong-portal-tls
    type: ClusterIP
  portalapi:
    annotations:
      konghq.com/protocol: https
    http:
      enabled: true
    ingress:
      annotations:
        konghq.com/https-redirect-status-code: '301'
        konghq.com/protocols: https
        konghq.com/strip-path: 'true'
        cert-manager.io/cluster-issuer: letsencrypt-prd
      enabled: true
      hostname: developer.kong.ba1.exchange.neor.space
      path: /api
      tls: kong-portalapi-tls
    type: ClusterIP
  postgresql:
    auth:
      password: samplePass
      postgresPassword: samplePass
    enabled: true
    global:
      storageClass: topolvm-provisioner
  proxy:
    annotations:
      prometheus.io/port: '9542'
      prometheus.io/scrape: 'true'
    enabled: true
    type: NodePort
    http:
      # Enable plaintext HTTP listen for the proxy
      enabled: true
      servicePort: 80
      containerPort: 8080
      # Set a nodePort which is available if service type is NodePort
      nodePort: 31080
      hostPort: 80
    tls:
      # Enable HTTPS listen for the proxy
      enabled: true
      servicePort: 443
      containerPort: 8443
      # Set a nodePort which is available if service type is NodePort
      nodePort: 31443
      hostPort: 443
  updateStrategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 100%
    type: RollingUpdate
